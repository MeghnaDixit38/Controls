m=1;
dt=0.1;
n=100;

%Altitude Control
A0 = [0 1; 0 0];
B0 = [0 ; 1];
[K0, S0, e0] = lqr(A0, B0, eye(2), 0.3);

zvec = zeros(2, n);
z0 = [0;0];
zvec(:,1)= z0;
uz = zeros(1,n);
zd = [5;0];

for i=1:n
    uz(1,i) = -K0*(zvec(:,i) - zd);

    %Find zvec at next time instant
    zvec(1,i+1)= zvec(1, i) + dt*(zvec(2, i) + dt*(uz(1, i)));
    zvec(2,i+1)= zvec(2, i) + dt*(uz(1, i));
end 
disp(zvec)

% %Can define absolute zvec
% I1= [0 1; -K0(1) -K0(2)];
% I2= [0 0; K0(1) K0(2)];
% %zab(t) =  expm(I1*t)*z0 + (expm(I1*t)-eye(4))*inv(I1)*I2*zd;
% for i=1:n/10
%     disp(zab(i,z0, zd, I1, I2));
% end

% U1 = m*(g-uz);
%Attitude Control
Ix= 2;
Iy= 4;
Iz= 6;
A1 = [0 1 0 0 0 0; 0 0 0 0 0 0; 0 0 0 1 0 0; 0 0 0 0 0 0; 0 0 0 0 0 1; 0 0 0 0 0 0];
B1 = [0 0 0; 1/Ix 0 0; 0 0 0; 0 1/Iy 0; 0 0 0; 0 0 Iz];

[K1, S1, e1] =  lqr(A1, B1, eye(6), 0.5);
disp(K1)
angle_vec = zeros(6, n);
angle0 = [0;0;0;0;0;0];
angle_vec(:,1)= angle0;
u = zeros(3,n); % u = [u1,u2,u3]
angle_d = [5;0;6;0;6;0]; % Desired angle = [phi, phi_dot , theta, theta_dot, psi, psi_dot]  

for i=1:n
    u(:,i) = -K1*(angle_vec(:,i) - angle_d);

    %Find vec at next time instant
    angle_vec(1,i+1)= angle_vec(1, i) + dt*(angle_vec(2, i) + dt*(u(1, i))/Ix);
    angle_vec(2,i+1)= angle_vec(2, i) + dt*(u(1, i)/Ix);
    angle_vec(3,i+1)= angle_vec(3, i) + dt*(angle_vec(4, i) + dt*(u(2, i))/Iy);
    angle_vec(4,i+1)= angle_vec(4, i) + dt*(u(2, i)/Iy);
    angle_vec(5,i+1)= angle_vec(5, i) + dt*(angle_vec(6, i) + dt*(u(3, i)/Iz));
    angle_vec(6,i+1)= angle_vec(6, i) + dt*(u(3, i)/Iz);
    
end 
disp(angle_vec)

u1 = zeros(1,n);
g = 9.81*ones(1,n);
A2 = [0 1 0 0 ; 0 0 0 0 ; 0 0 0 1; 0 0 0 0];
pos_vec = zeros(4, n);
pos0 = [0;0;0;0];
pos_vec(:,1)= pos0;
uxy = zeros(2,n); % u = [ux,uy]
pos_d = [5;0;6;0]; % Desired angle = [x, x_dot , y, y_dot] 
for i=1:n
    u1(1,i) = m*(g(1,i) - uz(1,i));
    a = u1(1,i) / m;
    B2 = [ 0 0; a 0; 0 0; 0 a];
    [K2, S2, e2] =  lqr(A2, B2, eye(4), 0.3);
    uxy(:,i) = -K2*(pos_vec(:,i) - pos_d);
    
    pos_vec(1,i+1)= pos_vec(1, i) + dt*(pos_vec(2, i) + dt*(uxy(1, i))*a);
    pos_vec(2,i+1)=pos_vec(2, i) + dt*(uxy(1, i)*a);
    pos_vec(3,i+1)= pos_vec(3, i) + dt*(pos_vec(4, i) + dt*(uxy(2, i))*a);
    pos_vec(4,i+1)= pos_vec(4, i) + dt*(uxy(2, i)*a);
end
disp(pos_vec)

     

%[U2; U3; U4] = -K1*angle; 

% function z = zab(t, z0, zd, I1, I2)
%     z =  expm(I1*t)*z0 + (expm(I1*t)-eye(4))*inv(I1)*I2*zd;
% end
